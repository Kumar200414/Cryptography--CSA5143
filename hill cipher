#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MATRIX_SIZE 2

// Function to calculate the determinant of a 2x2 matrix
int determinant(int matrix[MATRIX_SIZE][MATRIX_SIZE]) {
    return (matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]) % 26;
}

// Function to find the modular inverse of a number under modulo 26
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1)
            return x;
    }
    return -1;
}

// Function to generate the inverse matrix of a 2x2 matrix
void inverseMatrix(int matrix[MATRIX_SIZE][MATRIX_SIZE], int inverse[MATRIX_SIZE][MATRIX_SIZE]) {
    int det = determinant(matrix);
    int invDet = modInverse(det, 26);
    
    if (invDet == -1) {
        printf("Inverse doesn't exist\n");
        return;
    }

    inverse[0][0] = (matrix[1][1] * invDet) % 26;
    inverse[0][1] = (-matrix[0][1] * invDet) % 26;
    inverse[1][0] = (-matrix[1][0] * invDet) % 26;
    inverse[1][1] = (matrix[0][0] * invDet) % 26;

    // Handle negative values
    for (int i = 0; i < MATRIX_SIZE; i++) {
        for (int j = 0; j < MATRIX_SIZE; j++) {
            if (inverse[i][j] < 0) {
                inverse[i][j] += 26;
            }
        }
    }
}

// Function to multiply matrix with vector and take modulo 26
void matrixMultiply(int matrix[MATRIX_SIZE][MATRIX_SIZE], int vector[MATRIX_SIZE], int result[MATRIX_SIZE]) {
    for (int i = 0; i < MATRIX_SIZE; i++) {
        result[i] = 0;
        for (int j = 0; j < MATRIX_SIZE; j++) {
            result[i] += matrix[i][j] * vector[j];
        }
        result[i] = result[i] % 26;
    }
}

// Function to preprocess text (remove non-alphabetic characters and convert to uppercase)
void preprocessText(char text[], char processedText[]) {
    int len = strlen(text);
    int k = 0;

    for (int i = 0; i < len; i++) {
        if (isalpha(text[i])) {
            processedText[k++] = toupper(text[i]);
        }
    }
    processedText[k] = '\0';
}

// Function to encrypt text using the Hill cipher
void hillEncrypt(char text[], int key[MATRIX_SIZE][MATRIX_SIZE], char encryptedText[]) {
    char processedText[100] = "";
    preprocessText(text, processedText);

    int len = strlen(processedText);
    int vector[MATRIX_SIZE];
    int result[MATRIX_SIZE];
    int k = 0;

    // Add padding if necessary
    if (len % MATRIX_SIZE != 0) {
        strcat(processedText, "X");
        len++;
    }

    for (int i = 0; i < len; i += MATRIX_SIZE) {
        for (int j = 0; j < MATRIX_SIZE; j++) {
            vector[j] = processedText[i + j] - 'A';
        }
        matrixMultiply(key, vector, result);
        for (int j = 0; j < MATRIX_SIZE; j++) {
            encryptedText[k++] = result[j] + 'A';
        }
    }
    encryptedText[k] = '\0';
}

// Function to decrypt text using the Hill cipher
void hillDecrypt(char text[], int key[MATRIX_SIZE][MATRIX_SIZE], char decryptedText[]) {
    char processedText[100] = "";
    preprocessText(text, processedText);

    int inverseKey[MATRIX_SIZE][MATRIX_SIZE];
    inverseMatrix(key, inverseKey);

    int len = strlen(processedText);
    int vector[MATRIX_SIZE];
    int result[MATRIX_SIZE];
    int k = 0;

    for (int i = 0; i < len; i += MATRIX_SIZE) {
        for (int j = 0; j < MATRIX_SIZE; j++) {
            vector[j] = processedText[i + j] - 'A';
        }
        matrixMultiply(inverseKey, vector, result);
        for (int j = 0; j < MATRIX_SIZE; j++) {
            decryptedText[k++] = result[j] + 'A';
        }
    }
    decryptedText[k] = '\0';
}

int main() {
    char text[100], encryptedText[100], decryptedText[100];
    int key[MATRIX_SIZE][MATRIX_SIZE] = {{6, 24}, {1, 16}};

    printf("Enter the message to encrypt: ");
    scanf("%s", text);

    hillEncrypt(text, key, encryptedText);
    printf("Encrypted message: %s\n", encryptedText);

    hillDecrypt(encryptedText, key, decryptedText);
    printf("Decrypted message: %s\n", decryptedText);

    return 0;
}
